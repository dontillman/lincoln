{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["donationsValue","donations","reduce","a","d","Number","parseFloat","donation_amount","legalEmails","str","addresses","trim","split","map","s","length","re","every","test","DonationTable","prettyKey","key","right","charAt","toUpperCase","slice","_this2","this","keys","props","headings","k","i","react_default","createElement","body","filter","anon","donor_name","className","Component","App","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","dropHandler","ev","preventDefault","dataTransfer","items","item","kind","addFile","getAsFile","file","forEach","state","donationKeys","addCount","_this4","reader","FileReader","onload","_csvToObjs","lines","l","shift","objs","obj","v","csvToObjs","target","result","_csvToObjs2","slicedToArray","setState","concat","noteNewDonations","readAsText","anonDonations","value","anonPercent","Math","round","anonPercentVal","text","toFixed","note","userid","window","emailjs","init","send","subject","content","to_addresses","_this5","onDragOver","onDrop","App_DonationTable","onClick","onChange","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9894fea6.chunk.js","sourcesContent":["// Copyright 2019, J. Donald Tillman\n// All rights reserved.\n//\n// Lincoln programming task.\n\nimport React, { Component } from 'react';\nimport './App.css';\n\n// return the total value of these donations as a number\nfunction donationsValue(donations) {\n    return donations.reduce((a, d) => a + Number.parseFloat(d.donation_amount),\n                            0);\n}\n\n// simple CSV parser\n// returns a pair: the keys (in order) and the objects\nfunction csvToObjs(str) {\n    // lines, trim off white space, eliminate blank lines\n    const lines = str.split('\\n').map(l => l.trim()).filter(a => a);\n    const keys = lines.shift().split(',');\n    const objs = lines.map(l => {\n        var obj = {};\n        l.split(',').map((v, i) => obj[keys[i]] = v.trim());\n        return obj;\n    });\n    return [keys, objs];\n}\n\n// Return a list of email address, when valid, and between 1 and 3 in number.\nfunction legalEmails(str) {\n    var addresses = str.trim().split(',').map(s => s.trim());\n    if ((0 == addresses.length) || (3 < addresses.length)) {\n\treturn false;\n    }\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return addresses.every(s => re.test(s));\n}\n\n\n// Donation Table widget\n//\n// props\n//   keys: a list of keys for the headings\n//   donations: a list of objects\n//   anon: true to filter out anonymous donors\nclass DonationTable extends Component {\n\n    // make a CSV key presentable for a column heading\n    prettyKey = key => {\n        const right = key.split('_')[1];\n        if (2 < right.length) {\n            // JavaScript lacks capitalization\n            return right.charAt(0).toUpperCase() + right.slice(1);\n        } else {\n            return right.toUpperCase();\n        }            \n    }        \n\n    render() {\n        const keys = this.props.keys;\n        // (don't get confused: two different uses of \"key\" here: )\n        const headings = keys.map((k, i) =>\n                                  <th {...{ key: i}}>\n                                    { this.prettyKey(k) }\n                                  </th>);\n        // the table body \n        const body = this.props.donations\n              .filter(d => !this.props.anon || d.donor_name)\n              .map((d, i) => (\n                  <tr {...{key: i}} >\n                    { keys.map((k, i) => <td {...{ key: i }} >\n                                           { d[k] }\n                                         </td>) }\n                  </tr>\n              ));\n        return (\n            <div {...{className: 'donationTable'}} >\n              {\n                  (this.props.donations.length) ? (\n                      <table>\n                        <thead><tr>{ headings }</tr></thead>\n                        <tbody>{ body }</tbody>\n                      </table>\n                  ) : (\n                      <p {...{className: 'none'}}>\n                        No donations loaded.\n                        <br />\n                        Drag a CSV file here to add in donation data.\n                      </p>\n                  )\n              }\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { donationKeys: [],\n                       donations: [],\n                       anon: false,\n                       addCount: 0,\n                       addresses: ''};\n    }\n\n    // Add CSV file\n    addFile(file) {\n        const reader = new FileReader();\n        reader.onload = ev => {\n\t    const text = ev.target.result;\n\t    const [keys, donations] = csvToObjs(text);\n            const state = this.state;\n\n            // FUTURE: If you wanted to process the donation objects\n            // this would be the place to do it.\n\n            this.setState({ donationKeys: state.donationKeys && keys,\n                            donations: state.donations.concat(donations),\n                            addCount: state.addCount + 1 });\n            this.noteNewDonations(donations);\n        };\n        reader.readAsText(file);\n    }\n\n    // Update the \"notes\" section and send out email notices.\n    noteNewDonations(donations) {\n        const anonDonations = donations.filter(d => !d.donor_name);\n        const value = donationsValue(donations);\n        const anonPercent = Math.round(100 * anonDonations.length / donations.length);\n        const anonPercentVal = Math.round(100 * donationsValue(anonDonations) / value);\n        const text = 'Add #' + this.state.addCount + ': ' +\n              donations.length + ' donations added: ' +\n              'value $ ' + value.toFixed(2) + ', ' +\n              anonPercent + '% are anonymous, ' +\n              anonPercentVal + '% anonymous by value.';\n        this.setState({note: text});\n\n        // send out email if we can\n        if (legalEmails(this.state.addresses) && this.state.userid.trim()) {\n            window.emailjs.init(this.state.userid.trim());\n            window.emailjs.send('default_service',\n                                'default',\n                                {subject: 'Lincoln Donation Tool Alert',\n                                 content: text,\n                                 to_addresses: this.state.addresses.trim() });\n        }\n    }\n                       \n    // User has just dropped a file, or multiple files.\n    dropHandler = ev => {\n        ev.preventDefault();\n\n        // support both interfaces\n        if (ev.dataTransfer.items) {\n\t    // interface: DataTransferItemList \n\t    const items = ev.dataTransfer.items;\n\t    for (let i = 0; i < items.length; i++) {\n\t        const item = items[i];\n\t        if ('file' === item.kind) {\n\t\t    this.addFile(item.getAsFile());\n\t        }\n\t    }\n        } else {\n\t    // interface: DataTransfer\n\t    ev.dataTransfer.file.forEach(this.addFile);\n        }\n    }\n\n    render() {\n        return (\n            <div {...{ className: 'App',\n                       onDragOver: ev => ev.preventDefault() }} >\n              <p>\n                A donation table tool.\n              </p>\n              <p>\n                Dragging and dropping a donation CSV file will add\n                those donations to the table.  Any number of files can\n                be added.  You can add a file multiple times and we're\n                not going to check.\n              </p>\n              <p>\n                The total donations are summed below.\n              </p>\n              <p>\n                For each set of donations added, we include some data\n                about that set.\n              </p>\n              <p>\n                You can have a small email message sent out for each\n                set of donations added. For this you need to supply a\n                list of email messages and a super secret user ID.\n                It's for a freebie limited trial account.  Maximum of\n                3 email addresses for now.\n              </p>\n              <div {... { onDrop: this.dropHandler } } >\n                <DonationTable {...{ keys: this.state.donationKeys,\n                                     donations: this.state.donations,\n                                     anon: this.state.anon }} />\n                <p>\n                  Total donation amount:\n                  ${ donationsValue(this.state.donations).toFixed(2) }\n                </p>\n                <p>\n                  <button {...{ onClick: ev => this.setState({anon: !this.state.anon}),\n                                className: (this.state.anon) ? 'on' : ''}} >\n                    Filter\n                  </button> out anonymouse donations.\n                </p>\n                <p>\n                  { this.state.note }\n                </p>\n                <p>\n                  Email addresses for alerts (comma delimitted):\n                  <input {...{ className: legalEmails(this.state.addresses) ? 'emails' : 'emailsBad',\n\t\t\t       value: this.state.addresses,\n\t\t\t       onChange: ev => this.setState({addresses: ev.target.value }) }} />\n                </p>\n\t\t<p>\n\t          User ID for mail service:\n\t          <input {...{ className: 'userid',\n                               value: this.state.userid,\n                               onChange: ev => this.setState({userid: ev.target.value}) }} />\n                </p>\n              </div >\n            </div>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}