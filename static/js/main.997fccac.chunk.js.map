{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["donationsValue","donations","reduce","a","d","Number","parseFloat","donation_amount","legalEmails","str","addresses","trim","split","map","s","length","re","every","test","DonationTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","prettyKey","key","right","charAt","toUpperCase","slice","sortCol","ev","k","target","attributes","dkey","value","state","sort","setState","ds","anon","filter","donor_name","_s","slicedToArray","rev","b","isNaN","_this2","keys","headings","i","react_default","createElement","onClick","body","getDonations","className","Component","App","_this3","dropHandler","preventDefault","dataTransfer","items","item","kind","addFile","getAsFile","file","forEach","donationKeys","addCount","_this4","reader","FileReader","onload","_csvToObjs","lines","l","shift","objs","obj","v","csvToObjs","result","_csvToObjs2","concat","noteNewDonations","readAsText","anonDonations","anonPercent","Math","round","anonPercentVal","text","toFixed","note","userid","window","emailjs","init","send","subject","content","to_addresses","_this5","onDragOver","onDrop","App_DonationTable","onChange","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.997fccac.chunk.js","sourcesContent":["// Copyright 2019, J. Donald Tillman\n// All rights reserved.\n//\n// Lincoln programming task.\n\nimport React, { Component } from 'react';\nimport './App.css';\n\n// return the total value of these donations as a number\nfunction donationsValue(donations) {\n    return donations.reduce((a, d) => a + Number.parseFloat(d.donation_amount),\n                            0);\n}\n\n// simple CSV parser\n// returns a pair: the keys (in order) and the objects\nfunction csvToObjs(str) {\n    // lines, trim off white space, eliminate blank lines\n    const lines = str.split('\\n').map(l => l.trim()).filter(a => a);\n    const keys = lines.shift().split(',');\n    const objs = lines.map(l => {\n        var obj = {};\n        l.split(',').map((v, i) => obj[keys[i]] = v.trim());\n        return obj;\n    });\n    return [keys, objs];\n}\n\n// boolean if the string is a valid list of email addresses.\nfunction legalEmails(str) {\n    const maximum = 3;\n    var addresses = str.trim().split(',').map(s => s.trim());\n    if ((0 === addresses.length) || (maximum < addresses.length)) {\n\treturn false;\n    }\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return addresses.every(s => re.test(s));\n}\n\n// Donation Table widget\n//\n// props\n//   keys: a list of keys for the headings\n//   donations: a list of objects\n//   anon: true to filter out anonymous donors\nclass DonationTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {sort: null};\n    }\n\n    // make a CSV key presentable for a column heading\n    prettyKey = key => {\n        const right = key.split('_')[1];\n        if (2 < right.length) {\n            // JavaScript lacks capitalization\n            return right.charAt(0).toUpperCase() + right.slice(1);\n        } else {\n            return right.toUpperCase();\n        }\n    }\n\n    // set the sort column, flip it if it's already this\n    // the sort state is of the form null, or [key, bool] (for flipped).\n    sortCol = ev => {\n        const k = ev.target.attributes.dkey.value;\n        const s = this.state.sort;\n        this.setState({ sort: [k, (s && (k === s[0])) ? !s[1] : false] });\n    }\n\n    // retrieve the donations, filtered and sorted\n    // separate for testability\n    getDonations() {\n        var ds = this.props.donations;\n\n        // filter out anons\n        if (this.props.anon) {\n            ds = ds.filter(d => d.donor_name);\n        }\n\n        // sorting (use numeric sort when possible)\n        const s = this.state.sort;\n        if (null !== s) {\n            const [k, rev] = s;\n            ds.sort((a, b) =>\n                    // reverse\n                    ((rev) ? -1 : 1)\n                    * ((isNaN(a) || isNaN(b))\n                       // not both numbers\n                       ? ((a[k] === b[k]) ? 0 : (a[k] < b[k]) ? -1 : +1)\n                       // both numbers\n                       : a[k] - b[k]));\n        }\n        return ds;\n    }\n\n    render() {\n        const keys = this.props.keys;\n        // (don't get confused: two different uses of \"key\" here: )\n        const headings = keys.map((k, i) =>\n                                  <th {...{ key: i,\n                                            dkey: k,\n                                            onClick: this.sortCol}}>\n                                    { this.prettyKey(k) }\n                                  </th>);\n        // the table body\n        const body = this.getDonations().map((d, i) => (\n            <tr {...{key: i}} >\n              { keys.map((k, i) => <td {...{ key: i }} >\n                                     { d[k] }\n                                   </td>) }\n            </tr>\n        ));\n        return (\n            <div {...{className: 'donationTable'}} >\n              {\n                  (this.props.donations.length)\n                      ? (\n                          <table>\n                            <thead><tr>{ headings }</tr></thead>\n                            <tbody>{ body }</tbody>\n                          </table>\n                      )\n                      : (\n                          <p {...{className: 'none'}}>\n                            No donations loaded.\n                            <br />\n                            Drag a CSV file here to add in donation data.\n                          </p>\n                      )\n              }\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { donationKeys: [],\n                       donations: [],\n                       anon: false,\n                       addCount: 0,\n                       addresses: ''};\n    }\n\n    // Add CSV file\n    addFile(file) {\n        const reader = new FileReader();\n        reader.onload = ev => {\n\t    const text = ev.target.result;\n\t    const [keys, donations] = csvToObjs(text);\n            const state = this.state;\n\n            // FUTURE: If you wanted to process the donation objects\n            // this would be the place to do it.\n\n            this.setState({ donationKeys: state.donationKeys && keys,\n                            donations: state.donations.concat(donations),\n                            addCount: state.addCount + 1 });\n            this.noteNewDonations(donations);\n        };\n        reader.readAsText(file);\n    }\n\n    // Update the \"notes\" section and send out email notices.\n    noteNewDonations(donations) {\n        const anonDonations = donations.filter(d => !d.donor_name);\n        const value = donationsValue(donations);\n        const anonPercent = Math.round(100 * anonDonations.length / donations.length);\n        const anonPercentVal = Math.round(100 * donationsValue(anonDonations) / value);\n        const text = 'Add #' + this.state.addCount + ': ' +\n              donations.length + ' donations added: ' +\n              'value $ ' + value.toFixed(2) + ', ' +\n              anonPercent + '% are anonymous, ' +\n              anonPercentVal + '% anonymous by value.';\n        this.setState({note: text});\n\n        // send out email if we can\n        if (legalEmails(this.state.addresses) && this.state.userid.trim()) {\n            window.emailjs.init(this.state.userid.trim());\n            window.emailjs.send('default_service',\n                                'default',\n                                {subject: 'Lincoln Donation Tool Alert',\n                                 content: text,\n                                 to_addresses: this.state.addresses.trim() });\n        }\n    }\n\n    // User has just dropped a file, or multiple files.\n    dropHandler = ev => {\n        ev.preventDefault();\n\n        // support both interfaces\n        if (ev.dataTransfer.items) {\n\t    // interface: DataTransferItemList\n\t    const items = ev.dataTransfer.items;\n\t    for (let i = 0; i < items.length; i++) {\n\t        const item = items[i];\n\t        if ('file' === item.kind) {\n\t\t    this.addFile(item.getAsFile());\n\t        }\n\t    }\n        } else {\n\t    // interface: DataTransfer\n\t    ev.dataTransfer.file.forEach(this.addFile);\n        }\n    }\n\n    render() {\n        return (\n            <div {...{ className: 'App',\n                       onDragOver: ev => ev.preventDefault() }} >\n              <p>\n                A donation table tool.\n              </p>\n              <p>\n                Dragging and dropping a donation CSV file will add\n                those donations to the table.  Any number of files can\n                be added.  You can add a file multiple times and we're\n                not going to check.  Any number of files can be dropped\n                at once.\n              </p>\n              <p>\n                The total donations are summed below.\n              </p>\n              <p>\n                For each set of donations added, we include some data\n                about that set.\n              </p>\n              <p>\n                You can have a small email message sent out for each\n                set of donations added. For this you need to supply a\n                list of email addresses and a super secret user ID you\n                can get from Don.  The email address field automatically\n                validates.  There are a maximum of 3 email addresses\n                for now.\n              </p>\n              <p>\n                Later... added column sorting.\n              </p>\n              <div {... { onDrop: this.dropHandler } } >\n                <DonationTable {...{ keys: this.state.donationKeys,\n                                     donations: this.state.donations,\n                                     anon: this.state.anon }} />\n                <p>\n                  Total donation amount:\n                  ${ donationsValue(this.state.donations).toFixed(2) }\n                </p>\n                <p>\n                  <button {...{ onClick: ev => this.setState({anon: !this.state.anon}),\n                                className: (this.state.anon) ? 'on' : ''}} >\n                    Filter\n                  </button> out anonymouse donations.\n                </p>\n                <p>\n                  { this.state.note }\n                </p>\n                <p>\n                  Email addresses for alerts (comma separated):\n                  <input {...{ className: legalEmails(this.state.addresses) ? 'emails' : 'emailsBad',\n\t\t\t       value: this.state.addresses,\n\t\t\t       onChange: ev => this.setState({addresses: ev.target.value }) }} />\n                </p>\n\t\t<p>\n\t          User ID for mail service:\n\t          <input {...{ className: 'userid',\n                               value: this.state.userid,\n                               onChange: ev => this.setState({userid: ev.target.value}) }} />\n                </p>\n              </div >\n            </div>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}